# -*- coding: utf-8 -*-
"""Another copy of Copia de Antepenultimarevision.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G6m46J867a6QV-DWeUsKIebxmojR2A9h
"""

# Librerías necesarias
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import os
from IPython.display import display
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.impute import SimpleImputer
# Adding scipy.stats for pearsonr
from scipy.stats import pearsonr

# Archivos y nombres de las ciudades
archivos = {
    "Pasto": "/content/DPA.csv",
    "Pereira": "/content/DPE.csv",
    "Valledupar": "/content/DVA.csv"
}

# Umbrales
umbral_radiacion = 100  # Umbral para considerar una hora como "solar"
umbral_viabilidad = 400  # Umbral para días viables
resultados = {}

def cargar_datos(nombre_ciudad, archivo):
    # Cargar los datos
    df = pd.read_csv(archivo)
    df['Fecha'] = pd.to_datetime(df['Fecha'])
    df['Dia'] = df['Fecha'].dt.date
    df['Hora'] = df['Fecha'].dt.hour

    # Transformar datos
    df_transformed = df.pivot_table(
        index="Fecha",
        columns="Variable",
        values="Valor"
    ).reset_index()

    df_transformed.rename(columns={
        "RAD SOLAR": "Radiación Solar (Wh/m^2)",
        "VEL VIENTO": "Velocidad Viento (m/s)"
    }, inplace=True)

    df_transformed = df_transformed.dropna()
    df_transformed['Dia'] = df_transformed['Fecha'].dt.date
    df_transformed['Hora'] = df_transformed['Fecha'].dt.hour

    print(f"Datos cargados y transformados para {nombre_ciudad}")
    return df_transformed

def calcular_promedio_diario(df):
    promedio_diario = df.groupby('Dia')['Radiación Solar (Wh/m^2)'].mean()
    print("Promedio diario calculado.")
    return promedio_diario

def calcular_horas_solares(df, umbral):
    df['HoraSolar'] = (df['Radiación Solar (Wh/m^2)'] > umbral).astype(int)
    horas_solares = df.groupby('Dia')['HoraSolar'].sum()
    print("Horas solares calculadas.")
    return horas_solares

def calcular_fluctuacion_diaria(df):
    fluctuacion_diaria = df.groupby('Dia')['Radiación Solar (Wh/m^2)'].std()
    print("Fluctuación diaria calculada.")
    return fluctuacion_diaria

def calcular_dias_viables(df, umbral):
    radiacion_maxima = df.groupby('Dia')['Radiación Solar (Wh/m^2)'].max()
    dias_viables = radiacion_maxima[radiacion_maxima > umbral]
    print("Días viables calculados.")
    return dias_viables

def calcular_correlacion(df):
    correlacion = df['Radiación Solar (Wh/m^2)'].corr(df['Velocidad Viento (m/s)'])
    print(f"Correlación calculada: {correlacion}")
    return correlacion

def graficar_promedio_diario(promedio_diario, nombre_ciudad, umbral):
    plt.figure(figsize=(12, 6))
    plt.plot(promedio_diario, marker='o', label='Promedio Diario')
    plt.axhline(y=umbral, color='r', linestyle='--', label=f"Límite de Viabilidad ({umbral} Wh/m²)")
    plt.title(f"Comportamiento Diario de Radiación Solar - {nombre_ciudad}")
    plt.xlabel("Días")
    plt.ylabel("Radiación Solar (Wh/m²)")
    plt.grid()
    plt.legend()
    plt.show()
    print(f"Gráfico de promedio diario para {nombre_ciudad} mostrado.")

def graficar_correlacion(df, nombre_ciudad):
    plt.figure(figsize=(8, 6))
    plt.scatter(
        df['Radiación Solar (Wh/m^2)'],
        df['Velocidad Viento (m/s)'],
        alpha=0.5
    )
    plt.title(f"Correlación Radiación Solar vs Velocidad del Viento - {nombre_ciudad}")
    plt.xlabel("Radiación Solar (Wh/m²)")
    plt.ylabel("Velocidad del Viento (m/s)")
    plt.grid()
    plt.show()
    print(f"Gráfico de correlación para {nombre_ciudad} mostrado.")

def analizar_ciudad(nombre_ciudad, archivo):
    df = cargar_datos(nombre_ciudad, archivo)
    promedio_diario = calcular_promedio_diario(df)
    horas_solares = calcular_horas_solares(df, umbral_radiacion)
    fluctuacion_diaria = calcular_fluctuacion_diaria(df)
    dias_viables = calcular_dias_viables(df, umbral_viabilidad)
    correlacion = calcular_correlacion(df)
    radiacion_maxim = radiacion_maxima = df.groupby('Dia')['Radiación Solar (Wh/m^2)'].max()
    # Graficar resultados
    graficar_promedio_diario(promedio_diario, nombre_ciudad, umbral_viabilidad)
    graficar_correlacion(df, nombre_ciudad)
    graficar_comportamiento(df, dias_viables)
    graficar_comportamiento_por_hora(df)
    # Guardar resultados en un diccionario
    resultados[nombre_ciudad] = {
        "Promedio Diario": promedio_diario,
        "Horas Solares": horas_solares,
        "Fluctuación Diaria": fluctuacion_diaria,
        "Días Viables": dias_viables.index.tolist(),
        "Correlación": correlacion
    }
        # 5. Crear la tabla final con los resultados
    df_resultado = pd.DataFrame({
        'Radiación Promedio Diaria': promedio_diario,
        'Horas Solares': horas_solares,
        'Fluctuación Radiación': fluctuacion_diaria,
        'Radiación Máxima': radiacion_maxima
    })
    # Guardar los resultados en un archivo CSV
    output_file = f"{nombre_ciudad.lower()}_analisis.csv"
    df_resultado.to_csv(output_file, index=True)

    # Mostrar la tabla en la consola
    print(f"Análisis completado para {nombre_ciudad}. Archivo generado: {output_file}")
    print(df_resultado)  # Esto imprimirá la tabla completa
    print(f"Análisis completo para {nombre_ciudad}.\n")

def determinar_ciudades_viables(resultados):
    ciudades_viables = {
        ciudad: res for ciudad, res in resultados.items()
        if len(res["Días Viables"]) > 5 and res["Correlación"] > 0.5
    }
    print("Ciudades aptas para implementar paneles solares:", list(ciudades_viables.keys()))
    return ciudades_viables

def calcular_metricas(df):
    df['Dia'] = df['Fecha'].dt.date
    radiacion_diaria = df.groupby('Dia')['Radiación Solar (Wh/m^2)'].mean()
    df['HoraSolar'] = np.where(df['Radiación Solar (Wh/m^2)'] > umbral_radiacion, 1, 0)
    horas_solares = df.groupby('Dia')['HoraSolar'].sum()
    fluctuacion_diaria = df.groupby('Dia')['Radiación Solar (Wh/m^2)'].std()
    radiacion_maxima = df.groupby('Dia')['Radiación Solar (Wh/m^2)'].max()

    # Filtrar días con radiación máxima superior a 400
    dias_viables = radiacion_maxima[radiacion_maxima > 400].index.tolist()

    return radiacion_diaria, horas_solares, fluctuacion_diaria, radiacion_maxima, dias_viables

def graficar_comportamiento(df, dias_viables):
    """Graficar el comportamiento por hora y resaltar los días viables"""
    plt.figure(figsize=(14, 8))

    # Graficar para cada día
    for dia in df['Dia'].unique():
        datos_dia = df[df['Dia'] == dia]
        # Use the updated column name 'Radiación Solar (Wh/m^2)'
        plt.plot(datos_dia['Hora'], datos_dia['Radiación Solar (Wh/m^2)'], marker='o', label=f'Radiación Solar - {dia}')
        #plt.plot(datos_dia['Hora'], datos_dia['Velocidad Viento (m/s)'], marker='s', linestyle='--', label=f'Velocidad Viento - {dia}')

    # Línea de viabilidad de 400 Wh/m²
    plt.axhline(y=400, color='r', linestyle='-', linewidth=1.5, label='Límite de viabilidad (400 Wh/m²)')

    # Resaltar los días viables
    for dia in dias_viables.index:
        datos_dia = df[df['Dia'] == dia]
        plt.fill_between(
            datos_dia['Hora'],
            # Use the updated column name 'Radiación Solar (Wh/m^2)'
            datos_dia['Radiación Solar (Wh/m^2)'],
            400,
            where=(datos_dia['Radiación Solar (Wh/m^2)'] > 400),
            color='green',
            alpha=0.3,
            label=f'Día viable ({dia})' if f'Día viable ({dia})' not in plt.gca().get_legend_handles_labels()[1] else None
        )

    # Personalización del gráfico
    plt.title("Comportamiento por Hora y Días Viables", fontsize=14)
    plt.xlabel("Hora del Día", fontsize=12)
    plt.ylabel("Valor (Wh/m² y m/s)", fontsize=12)
    plt.xticks(range(0, 24))  # Mostrar las 24 horas
    plt.grid()
    plt.legend(loc='upper left', bbox_to_anchor=(1, 1))  # Leyenda fuera del gráfico
    plt.tight_layout()

    # Mostrar la gráfica
    plt.show()

def graficar_comportamiento_por_hora(df):
    """Graficar el comportamiento de la Radiación Solar y la Velocidad del Viento por hora para cada día, con doble eje."""

    sns.set(style="whitegrid")
    sns.jointplot(
        data=df,
        x="Radiación Solar (Wh/m^2)",
        y="Velocidad Viento (m/s)",
        kind="scatter"
    ).plot_joint(sns.regplot, scatter=False, color="red").plot_marginals(sns.histplot, kde=True, color="b")
    plt.suptitle(f"Correlación entre Rad. Solar y Vel. Viento - {archivos}", y=1.02, fontsize=16)
    plt.show()

analizar_ciudad("Pasto", archivos["Pasto"])  # Llena resultados["Pasto"]

analizar_ciudad("Pereira", archivos["Pereira"])  # Llena resultados["Pereira"]

analizar_ciudad("Valledupar", archivos["Valledupar"])  # Llena resultados["Valledupar"]

ciudades_viables = determinar_ciudades_viables(resultados)
print(ciudades_viables)